当一个类的内部数据过于复杂的时候（通常是负责持有数据的类，比如Config、VO、PO、Entity...），要创建的话可能就需要了解这个类的内部结构，
还有这些东西是怎么组织装配的。

1、什么是建造者模式
建造者模式是将一个 复杂的对象 的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
创建者模式隐藏了复杂对象的创建过程，它把复杂对象的创建过程加以抽象，通过子类继承或者重载的方式，动态的创建具有复合属性的对象。

2、适用场景
隔离复杂对象的创建和使用，相同的方法，不同执行顺序，产生不同事件结果。
多个部件都可以装配到一个对象中，但产生的运行结果不相同。
产品类非常复杂或者产品类因为调用顺序不同而产生不同作用。
初始化一个对象时，参数过多，或者很多参数具有默认值。
Builder模式不适合创建差异性很大的产品类，产品内部变化复杂，会导致需要定义很多具体建造者类实现变化，增加项目中类的数量，增加系统的理解难度和运行成本。
需要生成的产品对象有复杂的内部结构，这些产品对象具备共性。

3、主要作用
在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。
用户只需要给出指定复杂对象的类型和内容，建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来)。

4、模式讲解
指挥者（Director）直接和客户（Client）进行需求沟通；
沟通后指挥者将客户创建产品的需求划分为各个部件的建造请求（Builder）；
将各个部件的建造请求委派到具体的建造者（ConcreteBuilder）；
各个具体建造者负责进行产品部件的构建；
最终构建成具体产品（Product）。

5、优缺点
优点：使用建造者模式可以使客户端不必知道产品内部组成的细节。
     具体的建造者类之间是相互独立的，这有利于系统的扩展。
     具体的建造者相互独立，因此可以对建造的过程逐步细化，而不会对其他模块产生任何影响。

缺点：建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。
     如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。
