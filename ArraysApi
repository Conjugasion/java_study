1.Arrays.binarySearch(int[] array, int key)

array需要有序！
[1] 搜索值不是数组元素，且在数组范围内，从1开始计数，得“ - 插入点索引值”；

[2] 搜索值是数组元素，从0开始计数，得搜索值的索引值；

[3] 搜索值不是数组元素，且大于数组内元素，索引值为 – (length + 1);

[4] 搜索值不是数组元素，且小于数组内元素，索引值为 – 1。

程序：

       int arr [] =newint[]{1,3,4,5,8,9};

        Arrays.sort(arr);

       int index1 = Arrays.binarySearch(arr,6);

       int index2 = Arrays.binarySearch(arr,4);

       int index3 = Arrays.binarySearch(arr,0);

       int index4 = Arrays.binarySearch(arr,10);

        System.out.println("index1 = "+ index1 +", index2 = " + index2 + ", index3 = " + index3 +", index4 = "+ index4);

结果：index1= -5, index2 = 2, index3 = -1, index4 = -7


2.Arrays.fill(Object[] array, Object obj)

  用指定元素填充整个数组 (会替换掉数组中原来的元素)

  Integer[] data = {1, 2, 3, 4};
  Arrays.fill(data, 9);
  System.out.println(Arrays.toString(data)); // [9, 9, 9, 9]


3.Arrays.fill(Object[] array, int fromIndex, int toIndex, Object obj)

  用指定元素填充数组，从起始位置到结束位置，取头不取尾 (会替换掉数组中原来的元素)

  Integer[] data = {1, 2, 3, 4};
  Arrays.fill(data, 0, 2, 9);
  System.out.println(Arrays.toString(data)); // [9, 9, 3, 4]


4.Arrays.sort(Object[] array)

  对数组元素进行排序 (串行排序)

  String[] data = {"1", "4", "3", "2"};
  System.out.println(Arrays.toString(data)); // [1, 4, 3, 2]
  Arrays.sort(data);
  System.out.println(Arrays.toString(data)); // [1, 2, 3, 4]


5.Arrays.sort(T[] array, Comparator<? super T> comparator)

  使用自定义比较器，对数组元素进行排序 (串行排序)

  String[] data = {"1", "4", "3", "2"};
  System.out.println(Arrays.toString(data)); // [1, 4, 3, 2]
  // 实现降序排序，返回-1放左边，1放右边，0保持不变
  Arrays.sort(data, (str1, str2) -> {
      if (str1.compareTo(str2) > 0) {
  		return -1;
      } else {
          return 1;
      }
  });
  System.out.println(Arrays.toString(data)); // [4, 3, 2, 1]


6.Arrays.sort(Object[] array, int fromIndex, int toIndex)

  对指定范围内的数组元素进行排序 (串行排序)

  String[] data = {"1", "4", "3", "2"};
  System.out.println(Arrays.toString(data)); // [1, 4, 3, 2]
  // 对下标[0, 3)的元素进行排序，即对1，4，3进行排序，2保持不变
  Arrays.sort(data, 0, 3);
  System.out.println(Arrays.toString(data)); // [1, 3, 4, 2]


7.Arrays.sort(T[] array, int fromIndex, int toIndex, Comparator<? super T> c)

  使用自定义比较器，对指定范围内的数组元素进行排序 (串行排序)

  String[] data = {"1", "4", "3", "2"};
  System.out.println(Arrays.toString(data)); // [1, 4, 3, 2]
  // 对下标[0, 3)的元素进行降序排序，即对1，4，3进行降序排序，2保持不变
  Arrays.sort(data, 0, 3, (str1, str2) -> {
  	if (str1.compareTo(str2) > 0) {
  		return -1;
  	} else {
  		return 1;
  	}
  });
  System.out.println(Arrays.toString(data)); // [4, 3, 1, 2]


8.Arrays.binarySearch(Object[] array, int fromIndex, int toIndex, Object obj)

  使用二分法查找数组内指定范围内的指定元素的索引值

  Integer[] data = {1, 3, 5, 7};
  Arrays.sort(data);
  // {1, 3}，3的索引值为1
  System.out.println(Arrays.binarySearch(data, 0, 2, 3)); // 1


9.Arrays.copyOf(T[] original, int newLength)

  拷贝数组，其内部调用了 System.arraycopy() 方法，从下标 0 开始，如果超过原数组长度，则会用 null 进行填充

  Integer[] data1 = {1, 2, 3, 4};
  Integer[] data2 = Arrays.copyOf(data1, 2);
  System.out.println(Arrays.toString(data2)); // [1, 2]
  Integer[] data3 = Arrays.copyOf(data1, 5);
  System.out.println(Arrays.toString(data3)); // [1, 2, 3, 4, null]


10.Arrays.copyOfRange(T[] original, int from, int to)

  拷贝数组，指定起始位置和结束位置，如果超过原数组长度，则会用 null 进行填充

  Integer[] data1 = {1, 2, 3, 4};
  Integer[] data2 = Arrays.copyOfRange(data1, 0, 2);
  System.out.println(Arrays.toString(data2)); // [1, 2]
  Integer[] data2 = Arrays.copyOfRange(data1, 0, 5);
  System.out.println(Arrays.toString(data2)); // [1, 2, 3, 4, null]


11.Arrays.equals(Object[] array1, Object[] array2)

  判断两个数组是否相等，实际上比较的是两个数组的哈希值，即 Arrays.hashCode(data1) == Arrays.hashCode(data2)

  Integer[] data1 = {1, 2, 3};
  Integer[] data2 = {1, 2, 3};
  System.out.println(Arrays.equals(data1, data2)); // true


12.Arrays.deepEquals(Object[] array1, Object[] array2)

  判断两个多维数组是否相等，实际上比较的是两个数组的哈希值，即 Arrays.hashCode(data1) == Arrays.hashCode(data2)

  Integer[][] data1 = {{1,2,3}, {1,2,3}};
  Integer[][] data2 = {{1,2,3}, {1,2,3}};
  System.out.println(Arrays.deepEquals(data1, data2)); // true


13.Arrays.hashCode(Object[] array)

  返回数组的哈希值

  Integer[] data = {1, 2, 3};
  System.out.println(Arrays.hashCode(data)); // 30817


14.Arrays.deepHashCode(Object[] array)

  返回多维数组的哈希值

  Integer[][] data = {{1, 2, 3}, {1, 2, 3}};
  System.out.println(Arrays.deepHashCode(data)); // 987105


15.Arrays.toString(Object[] array)

  返回数组元素的字符串形式

  Integer[] data = {1, 2, 3};
  System.out.println(Arrays.toString(data)); // [1, 2, 3]


16.Arrays.deepToString(Object[] array)

  返回多维数组元素的字符串形式

  Integer[][] data = {{1, 2, 3}, {1, 2, 3}};
  System.out.println(Arrays.deepToString(data)); // [[1, 2, 3], [1, 2, 3]]

