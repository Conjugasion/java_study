策略模式指的是对象具备某个行为，但是在不同的场景中，该行为有不同的实现算法。比如一个人的交税比率与他的工资有关，不同的工资水平对应不同的税率。
策略模式 本质：分离算法，选择实现

1、主要解决
在有多种算法相似的情况下，使用 if...else 或 switch...case 所带来的复杂性和臃肿性。

2、优缺点
优点： 算法多样性，且具备自由切换功能；
      有效避免多重条件判断，增强了封装性，简化了操作，降低出错概率；
      扩展性良好，策略类遵顼 里氏替换原则，可以很方便地进行策略扩展；

缺点：策略类数量增多，且所有策略类都必须对外暴露，以便客户端能进行选择；

3、使用场景
针对同一类型问题，有多种处理方式，每一种都能独立解决问题；
算法需要自由切换的场景；
需要屏蔽算法规则的场景；

4、模式讲解
策略模式 主要包含三种角色：
上下文角色（Context）：用来操作策略的上下文环境，屏蔽高层模块（客户端）对策略、算法的直接访问，封装可能存在的变化；
抽象策略角色（Strategy）：规定策略或算法的行为；
具体策略角色（ConcreteStrategy）：具体的策略或算法实现；

5、举个例子
假设现在有两个数与一个运算符，要求使用该运算符操作这两个数。
分析：直接思路：通过判断运算符符号，对这两个数进行运算。代码如下所示：
  static class Calculator {
      private static final String SYMBOL_ADD = "+";
      private static final String SYMBOL_SUB = "-";

      public int calc(int a, int b, final String symbol) {
          int result = 0;
          if (SYMBOL_ADD.equals(symbol)) {
              result = a + b;
          } else if (SYMBOL_ADD.equals(symbol)) {
              result = a - b;
          }
          return result;
      }
  }
但是这样写的话，如果我们现在要扩展乘法*或除法/运算，那么就要在calc方法内增加对应的if...else判断，代码臃肿并且扩展性太低。
而如果采用策略模式，将各种运算符的计算都归并到对应具体策略，这样，就能简化代码并且带来很好的扩展性，具体代码如下：

