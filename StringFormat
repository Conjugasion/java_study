String.format()用法
String.format 作为文本处理工具，为我们提供强大而丰富的字符串格式化功能，为了不止步于简单调用

 String.format("Hello %s", "John");，下面将笔记整理并记录下来。

一、重载方法
// 使用当前本地区域对象（Locale.getDefault()）格式化字符串
String String.format(String fmt, Object... args);

// 自定义本地区域对象格式化字符串
String String.format(Locale locale, String fmt, Object... args);
二、常用的%s
1、单个占位符

String s = String.format("Hello %s，Welcome to my blog!", "jerry");
System.out.println(s);//Hello jerry，Welcome to my blog!
2、多个占位符按顺序

String s = String.format("Hello %s%s%s", "jerry-", "li", ",welcome!");
3、多个占位符按索引

String s = String.format("Hello %2$s%3$s%1$s", "li-", "heng-", "jie");
三、占位符
占位符完整格式为：%[index$][标识]*[最小宽度][.精度]转换符。

针对不同数据类型的格式化，占位符的格式将有所裁剪。

%，占位符的其实字符，若要在占位符内部使用%，则需要写成%% 。

[index$]  ，位置索引从1开始计算，用于指定对索引相应的实参进行格式化并替换掉该占位符。

[标识]，用于增强格式化能力，可同时使用多个[标识]，但某些标识是不能同时使用的。

[最小宽度]，用于设置格式化后的字符串最小长度，若使用[最小宽度]而无设置[标识]，那么当字符串长度小于最小宽度时，则以左边补空格的方式凑够最小宽度。

[.精度]，对于浮点数类型格式化使用，设置保留小数点后多少位。

转换符，用于指定格式化的样式，和限制对应入参的数据类型。

四、对字符、字符串进行格式化
占位符格式为：%[index$][标识][最小宽度]转换符

示例——将"hello"格式化为"  hello"

String raw = "hello";
String str = String.format("%1$7s", raw);
// 简化
//String str = String.format("%7s", raw);
示例——将"hello"格式化为"hello  "

String raw = "hello";
String str = String.format("%1$-7s", raw);
// 简化
//String str = String.format("%-7s", raw);
可用标识：

-，在最小宽度内左对齐，右边用空格补上。

可用转换符：

s，字符串类型。

c，字符类型，实参必须为char或int、short等可转换为char类型的数据类型，否则抛IllegalFormatConversionException异常。

b，布尔类型，只要实参为非false的布尔类型，均格式化为字符串true，否则为字符串false。

n，平台独立的换行符（与通过 System.getProperty("line.separator") 是一样的）

五、对整数进行格式化　
占位符格式为：%[index$][标识]*[最小宽度]转换符

示例——将1显示为0001
int num = 1;
String str = String.format("%04d", num)
示例——将-1000显示为(1,000)

int num = -1000;
String str = String.format("%(,d", num)
可用标识：

-，在最小宽度内左对齐,不可以与0标识一起使用。
0，若内容长度不足最小宽度，则在左边用0来填充。
#，对8进制和16进制，8进制前添加一个0,16进制前添加0x。
+，结果总包含一个+或-号。
空格，正数前加空格，负数前加-号。
,，只用与十进制，每3位数字间用,分隔。
(，若结果为负数，则用括号括住，且不显示符号。
可用转换符:

b，布尔类型，只要实参为非false的布尔类型，均格式化为字符串true，否则为字符串false。
d，整数类型（十进制）。
x，整数类型（十六进制）。
o，整数类型（八进制）
n，平台独立的换行符, 也可通过System.getProperty("line.separator")获取
六、对浮点数进行格式化
占位符格式为：%[index$][标识]*[最小宽度][.精度]转换符

示例

double num = 123.4567899;
System.out.print(String.format("%f %n", num)); // 123.456790
System.out.print(String.format("%a %n", num)); // 0x1.edd3c0bb46929p6
System.out.print(String.format("%g %n", num)); // 123.457
可用标识：

-，在最小宽度内左对齐,不可以与0标识一起使用。
0，若内容长度不足最小宽度，则在左边用0来填充。
#，对8进制和16进制，8进制前添加一个0,16进制前添加0x。
+，结果总包含一个+或-号。
空格，正数前加空格，负数前加-号。
,，只用与十进制，每3位数字间用,分隔。
(，若结果为负数，则用括号括住，且不显示符号。
可用转换符：

b，布尔类型，只要实参为非false的布尔类型，均格式化为字符串true，否则为字符串false。
n，平台独立的换行符, 也可通过System.getProperty("line.separator")获取。
f，浮点数型（十进制）。显示9位有效数字，且会进行四舍五入。如99.99。
a，浮点数型（十六进制）。
e，指数类型。如9.38e+5。
g，浮点数型（比%f，%a长度短些，显示6位有效数字，且会进行四舍五入）
七、对日期时间进行格式化
占位符格式为：%[index$]t转换符

示例：

Date now = new Date();
String str = String.format("%tF", now); // 2014-10-12
可用转换符

　　1. 日期的转换符

c，星期六 十月 27 14:21:20 CST 2007
F，2007-10-27
D，10/27/07
r，02:25:51 下午
T，14:28:16
R，14:28
b, 月份简称
B, 月份全称
a, 星期简称
A, 星期全称
C, 年前两位（不足两位补零）
y, 年后两位（不足两位补零）
j, 当年的第几天
m, 月份（不足两位补零）
d, 日期（不足两位补零）
e, 日期（不足两位不补零）
　　2. 时间的转换符

H, 24小时制的小时（不足两位补零）
k, 24小时制的小时（不足两位不补零）
I, 12小时制的小时（不足两位补零）
i, 12小时制的小时（不足两位不补零）
M, 分钟（不足两位补零）
S, 秒（不足两位补零）
L, 毫秒（不足三位补零）
N, 毫秒（不足9位补零）
p, 小写字母的上午或下午标记，如中文为“下午”，英文为pm
z, 相对于GMT的时区偏移量，如+0800
Z, 时区缩写，如CST
s, 自1970-1-1 00:00:00起经过的秒数
Q, 自1970-1-1 00:00:00起经过的豪秒
八、其他转换符
<，用于格式化前一个转换符所描述的参数。

示例

int num = 1000;
String str = String.format("%d %<,d", num);
// 结果"1000 1,000
九、一些测试样例
public static void main(String[] args) {
    String str=null;
    //$使用
    str=String.format("格式参数$的使用：%1$d,%2$s", 99,"abc");
    System.out.println(str);
    //+使用
    System.out.printf("显示正负数的符号：%+d与%d%n", 99,-99);
    //补O使用
    System.out.printf("最牛的编号是：%03d%n", 7);
    //空格使用
    System.out.printf("Tab键的效果是：% 8d%n", 7);
    //.使用
    System.out.printf("整数分组的效果是：%,d%n", 9989997);
    //空格和小数点后面个数
    System.out.printf("一本书的价格是：% 50.5f元%n", 49.8);
}
输出结果：


格式参数$的使用：99,abc
显示正负数的符号：+99与-99
最牛的编号是：007
Tab键的效果是：       7
整数分组的效果是：9,989,997
一本书的价格是：                                          49.80000元
public static void main(String[] args) {
    Date date=new Date();
    //c的使用
    System.out.printf("全部日期和时间信息：%tc%n",date);
    //f的使用
    System.out.printf("年-月-日格式：%tF%n",date);
    //d的使用
    System.out.printf("月/日/年格式：%tD%n",date);
    //r的使用
    System.out.printf("HH:MM:SS PM格式（12时制）：%tr%n",date);
    //t的使用
    System.out.printf("HH:MM:SS格式（24时制）：%tT%n",date);
    //R的使用
    System.out.printf("HH:MM格式（24时制）：%tR",date);
}
打印结果：


全部日期和时间信息：星期一 九月 10 10:43:36 CST 2012
年-月-日格式：2012-09-10
月/日/年格式：09/10/12
HH:MM:SS PM格式（12时制）：10:43:36 上午
HH:MM:SS格式（24时制）：10:43:36
HH:MM格式（24时制）：10:43
public static void main(String[] args) {
    Date date=new Date();
    //b的使用，月份简称
    String str=String.format(Locale.US,"英文月份简称：%tb",date);
    System.out.println(str);
    System.out.printf("本地月份简称：%tb%n",date);
    //B的使用，月份全称
    str=String.format(Locale.US,"英文月份全称：%tB",date);
    System.out.println(str);
    System.out.printf("本地月份全称：%tB%n",date);
    //a的使用，星期简称
    str=String.format(Locale.US,"英文星期的简称：%ta",date);
    System.out.println(str);
    //A的使用，星期全称
    System.out.printf("本地星期的简称：%tA%n",date);
    //C的使用，年前两位
    System.out.printf("年的前两位数字（不足两位前面补0）：%tC%n",date);
    //y的使用，年后两位
    System.out.printf("年的后两位数字（不足两位前面补0）：%ty%n",date);
    //j的使用，一年的天数
    System.out.printf("一年中的天数（即年的第几天）：%tj%n",date);
    //m的使用，月份
    System.out.printf("两位数字的月份（不足两位前面补0）：%tm%n",date);
    //d的使用，日（二位，不够补零）
    System.out.printf("两位数字的日（不足两位前面补0）：%td%n",date);
    //e的使用，日（一位不补零）
    System.out.printf("月份的日（前面不补0）：%te",date);
打印结果


英文月份简称：Sep
本地月份简称：九月
英文月份全称：September
本地月份全称：九月
英文星期的简称：Mon
本地星期的简称：星期一
年的前两位数字（不足两位前面补0）：20
年的后两位数字（不足两位前面补0）：12
一年中的天数（即年的第几天）：254
两位数字的月份（不足两位前面补0）：09
两位数字的日（不足两位前面补0）：10
月份的日（前面不补0）：10
public static void main(String[] args) {
    Date date = new Date();
    //H的使用
    System.out.printf("2位数字24时制的小时（不足2位前面补0）:%tH%n", date);
    //I的使用
    System.out.printf("2位数字12时制的小时（不足2位前面补0）:%tI%n", date);
    //k的使用
    System.out.printf("2位数字24时制的小时（前面不补0）:%tk%n", date);
    //l的使用
    System.out.printf("2位数字12时制的小时（前面不补0）:%tl%n", date);
    //M的使用
    System.out.printf("2位数字的分钟（不足2位前面补0）:%tM%n", date);
    //S的使用
    System.out.printf("2位数字的秒（不足2位前面补0）:%tS%n", date);
    //L的使用
    System.out.printf("3位数字的毫秒（不足3位前面补0）:%tL%n", date);
    //N的使用
    System.out.printf("9位数字的毫秒数（不足9位前面补0）:%tN%n", date);
    //p的使用
    String str = String.format(Locale.US, "小写字母的上午或下午标记(英)：%tp", date);
    System.out.println(str);
    System.out.printf("小写字母的上午或下午标记（中）：%tp%n", date);
    //z的使用
    System.out.printf("相对于GMT的RFC822时区的偏移量:%tz%n", date);
    //Z的使用
    System.out.printf("时区缩写字符串:%tZ%n", date);
    //s的使用
    System.out.printf("1970-1-1 00:00:00 到现在所经过的秒数：%ts%n", date);
    //Q的使用
    System.out.printf("1970-1-1 00:00:00 到现在所经过的毫秒数：%tQ%n", date);
}
打印结果：


2位数字24时制的小时（不足2位前面补0）:11
2位数字12时制的小时（不足2位前面补0）:11
2位数字24时制的小时（前面不补0）:11
2位数字12时制的小时（前面不补0）:11
2位数字的分钟（不足2位前面补0）:03
2位数字的秒（不足2位前面补0）:52
3位数字的毫秒（不足3位前面补0）:773
9位数字的毫秒数（不足9位前面补0）:773000000
小写字母的上午或下午标记(英)：am
小写字母的上午或下午标记（中）：上午
相对于GMT的RFC822时区的偏移量:+0800
时区缩写字符串:CST
1970-1-1 00:00:00 到现在所经过的秒数：1347246232
1970-1-1 00:00:00 到现在所经过的毫秒数：1347246232773